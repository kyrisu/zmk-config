#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires auto-layer module
#include <dt-bindings/zmk/keys.h>
#if CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>

#include "zmk-helpers/helper.h"

#define DEF 0
#define FN 1
#define NUM 2

#include "combos.dtsi"  // requires layer aliases
#include "extra_keys.h"

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&left_encoder { resolution = <4>; };

&right_encoder { resolution = <4>; };

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <175>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word NUM>, <&sl NUM>;  // reverse this for sticky-num on single tap
)

/* Custom behaviors */

// Alt+Tab swapper, requires PR #1366
ZMK_TRI_STATE(swapper,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_HOLD_TAP(lt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

// tap: copy | double-tap: cut
ZMK_TAP_DANCE(copy_cut,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

// Windows sleep key
ZMK_MACRO(win_sleep,
    wait-ms = <500>;
    tap-ms = <50>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

// Double CMD
ZMK_MACRO(cmd_double_press,
    wait-ms = <10>;
    tap-ms = <10>;
    bindings = <&kp LGUI &kp LGUI>;
)

// Double CMD
ZMK_MACRO(hyper,
    bindings = <
        &kp LCTL
        &kp LSHIFT
        &kp LALT
        &kp LGUI
    >;
)

// misc aliases
#define CANCEL      &kp K_CANCEL             // cancel caps-word, num-word and smart-mouse
#define DSK_PREV    &hmr LCTRL LG(LC(LEFT))   // previous desktop
#define DSK_NEXT    &hmr LALT LG(LC(RIGHT)) // next     desktop
#define PIN_WIN     &kp LG(LC(LS(Q)))        // pin window across desktops
#define PIN_APP     &kp LG(LC(LS(A)))        // pin application across desktops
#define DSK_MGR     &kp LA(GRAVE)            // desktop manager
#define VOL_DOWN    &hmr RSHFT C_VOL_DN

#define HYPER_TAB &mt LC(LS(LA(LGUI))) TAB

/* Keymap */

/* ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS)  // FN + NUM --> SYS */

ZMK_LAYER(base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp MINUS     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                           &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &kp EQUAL
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp GRAVE     &kp Q         &kp W         &kp E         &kp R         &kp T                            &kp Y         &kp U         &kp I         &kp O         &kp P         &kp BACKSLASH
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp ESC       &hml LCTRL A  &hml LALT S   &hml LSHFT D  &hml LGUI F   &kp G                            &kp H         &hmr RGUI J   &hmr RSHFT K  &hmr LALT L   &hmr RCTRL SEMI &kp SQT
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼───────╮ ╭────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &kp Z         &kp X         &kp C         &kp V         &kp B         &kp C_MUTE XXX     &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH     XXX
//├─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼───────┤ ├────────┼─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────┤
                                XXX           XXX           XXX           &lt NUM SPACE  HYPER_TAB  &kp ENTER &lt FN BSPC      XXX           XXX           XXX
//                            ╰─────────────┴─────────────┴─────────────┴─────────────┴───────╯ ╰────────┴─────────────┴─────────────┴─────────────┴─────────────╯
, &inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN
)

ZMK_LAYER(fn,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           &kp F10       &kp F11       &kp F12       &rgb_ug RGB_EFF                  &kp N6        &kp C_PREV    &kp C_PP      &kp C_NEXT    &kp N0        &kp EQUAL
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &rgb_ug RGB_TOG &kp F7      &kp F8        &kp F9        &rgb_ug RGB_EFF                  &cmd_double_press &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP  XXX           &kp BACKSLASH
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &rgb_ug RGB_BRD &kp F4      &kp F5        &kp F6        &rgb_ug RGB_BRI                  &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &caps_word    &kp SQT
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼───────╮ ╭────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &rgb_ug RGB_SPD &kp F1      &kp F2        &kp F3        &rgb_ug RGB_SPI ___      ___     &kp PG_UP     &kp PG_DN     &kp HOME      &kp END       &kp CAPS      XXX
//├─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼───────┤ ├────────┼─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────┤
                                XXX           XXX           XXX            ___           ___      ___      ___      XXX           XXX           XXX
//                            ╰─────────────┴─────────────┴─────────────┴─────────────┴───────╯ ╰────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                           &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &kp F11
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp GRAVE     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                           &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &kp F12
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                      &kp CARET     &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR      &kp PIPE
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼───────╮ ╭────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &kp EQUAL     &kp MINUS     &kp PLUS      &kp LBRC      &kp RBRC       ___      ___      &kp LBKT      &kp RBKT      &kp SEMI      &kp COLON     &kp BSLH      &kp SLASH
//├─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼───────┤ ├────────┼─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────┤
                                XXX           XXX           XXX           ___            ___      ___      ___      XXX           XXX           XXX
//                            ╰─────────────┴─────────────┴─────────────┴─────────────┴───────╯ ╰────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

/* vim: set ft=c tw=174: */
